SQL> 
SQL> -- TP2.sql
SQL> -- Par Guillaume Lahaie
SQL> -- LAHG04077707
SQL> -- Remise: 12 décembre 2012
SQL> 
SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'DD/MM/YYYY'
  2  /

Session altered.

SQL> 
SQL> --1. Création des contraintes d'intégrité
SQL> 
SQL> --C1 Un sigle de cours doit être formé de 3 lettres suivies de quatre chiffres
SQL> --Pour le moment, on accepte les lettres majuscules et minuscules.
SQL> ALTER TABLE Cours
  2  ADD (CONSTRAINT SigleCours CHECK(REGEXP_LIKE(sigle, '^[a-zA-Z]{3}[0-9]{4}')))
  3  /

Table altered.

SQL> 
SQL> --C2 Le nombre de crédits est un entier entre 0 et 99
SQL> ALTER TABLE Cours
  2  ADD (CONSTRAINT NoCredit CHECK(nbCredits < 100 AND nbCredits >= 0))
  3  /

Table altered.

SQL> 
SQL> -- C3 : La date de fin de session doit être au moins 90 jours après la date
SQL> --      de début de session
SQL> ALTER TABLE SessionUqam
  2  ADD (CONSTRAINT LongueurSession CHECK(DateFin - DateDebut >= 90))
  3  /

Table altered.

SQL> 
SQL> --C4 : Si la date d’abandon est non nulle, la note doit être nulle.
SQL> --Fait avec l'équivalence logique (A -> B) <-> (notA V B)
SQL> ALTER TABLE Inscription
  2  ADD(CONSTRAINT AbandonNote CHECK(DateAbandon IS NULL OR note IS NULL))
  3  /

Table altered.

SQL> 
SQL> -- C5: Lorsqu'un étudiant est supprimé, toutes ses inscriptions sont
SQL> --     automatiquement supprimées
SQL> CREATE OR REPLACE TRIGGER BDSupprimeEtudiant
  2  BEFORE DELETE ON Etudiant
  3  FOR EACH ROW
  4  BEGIN
  5  	 LOCK TABLE Inscription IN ROW SHARE MODE;
  6  	 DELETE FROM Inscription
  7  	 WHERE codePermanent = :OLD.codePermanent;
  8  END;
  9  /

Trigger created.

SQL> 
SQL> --C6 : Interdire un changement de note de plus de 20 points
SQL> CREATE OR REPLACE TRIGGER BUChangementDeNote
  2  BEFORE UPDATE OF note ON Inscription
  3  FOR EACH ROW
  4  BEGIN
  5  IF ((:NEW.note > :OLD.note + 20) OR (:NEW.note < :OLD.note -20)) THEN
  6  	 raise_application_error(-20100, 'Impossible de modifier une note
  7  					   de plus de 20 points.');
  8  END IF;
  9  END;
 10  /

Trigger created.

SQL> 
SQL> --2. Insertion des données et tests de contraintes.
SQL> 
SQL> --Tests pour C1:
SQL> --Deux INSERT acceptés
SQL> INSERT INTO Cours
  2  VALUES('INF3172', 'Système d exploitation', 3)
  3  /

1 row created.

SQL> 
SQL> INSERT INTO Cours
  2  VALUES('inf3172', 'Systeme d exploitation', 3)
  3  /

1 row created.

SQL> 
SQL> --Le  INSERT est accepté, mais le update sera refusé
SQL> INSERT INTO Cours
  2  VALUES('INF4170', 'Architecture des ordinateurs', 3)
  3  /

1 row created.

SQL> 
SQL> UPDATE Cours
  2  SET Sigle = '4170INF'
  3  WHERE Sigle ='INF4170'
  4  /
UPDATE Cours
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.SIGLECOURS) violated 


SQL> 
SQL> --Les autres INSERT devraient être refusés
SQL> INSERT INTO Cours
  2  VALUES('4170INF', 'Architecture des ordinateurs', 3)
  3  /
INSERT INTO Cours
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.SIGLECOURS) violated 


SQL> 
SQL> INSERT INTO Cours
  2  VALUES('in41700', 'Architecture des ordinateurs', 3)
  3  /
INSERT INTO Cours
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.SIGLECOURS) violated 


SQL> 
SQL> INSERT INTO Cours
  2  VALUES('INFF417', 'Architecture des ordinateurs', 3)
  3  /
INSERT INTO Cours
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.SIGLECOURS) violated 


SQL> 
SQL> ROLLBACK
  2  /

Rollback complete.

SQL> 
SQL> --Tests pour C2:
SQL> --Le premier INSERT est accepté, alors que les deux autres rejetés
SQL> INSERT INTO Cours
  2  VALUES('INF5151', 'Génie Logiciel', 3)
  3  /

1 row created.

SQL> 
SQL> INSERT INTO Cours
  2  VALUES('INF5153', 'Génie Logiciel 2', 103)
  3  /
INSERT INTO Cours
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.NOCREDIT) violated 


SQL> 
SQL> INSERT INTO Cours
  2  VALUES('INM5151', 'Projet', -5)
  3  /
INSERT INTO Cours
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.NOCREDIT) violated 


SQL> 
SQL> --Le premier UPDATE est accepté, le second est refusé
SQL> UPDATE Cours
  2  SET nbCredits = 40
  3  WHERE sigle = 'INF3123'
  4  /

1 row updated.

SQL> 
SQL> UPDATE Cours
  2  SET nbCredits = 200
  3  WHERE sigle = 'INF3123'
  4  /
UPDATE Cours
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.NOCREDIT) violated 


SQL> 
SQL> ROLLBACK
  2  /

Rollback complete.

SQL> 
SQL> --Test pour C3:
SQL> --La première valeur devrait être insérée dans la table, alors que les autres
SQL> --donneront un erreur d'intégrité. Le UPDATE est refusé aussi.
SQL> INSERT INTO SessionUQAM
  2  VALUES(32004, '01/01/2013', '30/04/2013')
  3  /

1 row created.

SQL> 
SQL> INSERT INTO SessionUQAM
  2  VALUES(32005, '01/01/2013', '01/03/2013')
  3  /
INSERT INTO SessionUQAM
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.LONGUEURSESSION) violated 


SQL> 
SQL> INSERT INTO SessionUQAM
  2  VALUES(32006, '01/01/2013', '31/03/2013')
  3  /
INSERT INTO SessionUQAM
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.LONGUEURSESSION) violated 


SQL> 
SQL> UPDATE SessionUQAM
  2  SET dateFin = '28/02/2013'
  3  WHERE codeSession = 32004
  4  /
UPDATE SessionUQAM
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.LONGUEURSESSION) violated 


SQL> 
SQL> ROLLBACK
  2  /

Rollback complete.

SQL> 
SQL> --Tests pour C4:
SQL> --Vérification avec UPDATE et INSERT
SQL> --Deux erreurs avec UPDATE. Le premier, la date d'abandon est non-nulle et
SQL> --on tente d'ajouter une note, Le second, la note est non-nulle et on tente
SQL> --d'ajouter une date d'abandon.
SQL> UPDATE Inscription
  2  SET note = 75
  3  WHERE  codePermanent = 'MONC05127201' and sigle = 'INF5180'
  4  /
UPDATE Inscription
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.ABANDONNOTE) violated 


SQL> 
SQL> UPDATE Inscription
  2  SET dateAbandon = '20/09/2003'
  3  WHERE codePermanent = 'MONC05127201' and sigle = 'INF3180'
  4  /
UPDATE Inscription
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.ABANDONNOTE) violated 


SQL> 
SQL> --Un UPDATE qui est accepté.
SQL> UPDATE Inscription
  2  SET dateAbandon = '20/09/2003', note = NULL
  3  WHERE codePermanent = 'EMEK10106501' AND sigle = 'INF3180'
  4  /

1 row updated.

SQL> 
SQL> --Un INSERT qui fonctionne, et UPDATE aussi.
SQL> INSERT INTO Inscription
  2  VALUES('VANV05127201', 'INF5180', 10, 12004, '15/12/2003', NULL, NULL)
  3  /

1 row created.

SQL> 
SQL> UPDATE Inscription
  2  SET note = 80
  3  WHERE codePermanent = 'VANV05127201' and sigle = 'INF5180'
  4  /

1 row updated.

SQL> 
SQL> --Un INSERT qui ne fonctionne pas.
SQL> INSERT INTO Inscription
  2  VALUES('VANV05127201', 'INF1110', 20, 32003, '17/08/2003', '20/09/2003', 80)
  3  /
INSERT INTO Inscription
*
ERROR at line 1:
ORA-02290: check constraint (GK491589.ABANDONNOTE) violated 


SQL> 
SQL> ROLLBACK
  2  /

Rollback complete.

SQL> 
SQL> --Tests pour C5:
SQL> --On efface un codePermanent qui existe. On affiche les cours dans la table
SQL> --Inscription avant le DELETE de la table Etudiant et après.
SQL> SELECT COUNT(*)
  2  FROM Inscription
  3  WHERE codePermanent = 'VANV05127201'
  4  /

  COUNT(*)                                                                      
----------                                                                      
         2                                                                      

SQL> 
SQL> DELETE FROM Etudiant
  2  WHERE codePermanent = 'VANV05127201'
  3  /

1 row deleted.

SQL> 
SQL> SELECT COUNT(*)
  2  FROM Inscription
  3  WHERE codePermanent = 'VANV05127201'
  4  /

  COUNT(*)                                                                      
----------                                                                      
         0                                                                      

SQL> 
SQL> ROLLBACK
  2  /

Rollback complete.

SQL> 
SQL> --Test pour C6:
SQL> --Vérification des UPDATE. Un UPDATE refusé.
SQL> UPDATE Inscription
  2  SET note = 65
  3  WHERE codePermanent = 'MARA25087501' AND sigle = 'INF1130'
  4  /
UPDATE Inscription
       *
ERROR at line 1:
ORA-20100: Impossible de modifier une note 
de plus de 20 points.
ORA-06512: at "GK491589.BUCHANGEMENTDENOTE", line 3
ORA-04088: error during execution of trigger 'GK491589.BUCHANGEMENTDENOTE' 


SQL> 
SQL> --UPDATE accepté.
SQL> UPDATE Inscription
  2  SET note = 75
  3  WHERE codePermanent = 'MARA25087501' AND sigle = 'INF1130'
  4  /

1 row updated.

SQL> 
SQL> --UPDATE refusé.
SQL> UPDATE Inscription
  2  SET note = 96
  3  WHERE codePermanent = 'STEG03106901' AND sigle = 'INF2110'
  4  /
UPDATE Inscription
       *
ERROR at line 1:
ORA-20100: Impossible de modifier une note 
de plus de 20 points.
ORA-06512: at "GK491589.BUCHANGEMENTDENOTE", line 3
ORA-04088: error during execution of trigger 'GK491589.BUCHANGEMENTDENOTE' 


SQL> 
SQL> --UPDATE accepté.
SQL> UPDATE Inscription
  2  SET note = 85
  3  WHERE codePermanent = 'STEG03106901' AND sigle = 'INF2110'
  4  /

1 row updated.

SQL> 
SQL> --Vérification sur un changement sur plusieurs lignes. L'UPDATE est refusé.
SQL> UPDATE Inscription
  2  SET note = 95
  3  WHERE sigle='INF3180' AND noGroupe = 40
  4  /
UPDATE Inscription
       *
ERROR at line 1:
ORA-20100: Impossible de modifier une note 
de plus de 20 points.
ORA-06512: at "GK491589.BUCHANGEMENTDENOTE", line 3
ORA-04088: error during execution of trigger 'GK491589.BUCHANGEMENTDENOTE' 


SQL> 
SQL> --Un UPDATE sur plusieurs lignes acceptées.
SQL> UPDATE Inscription
  2  SET note = 90
  3  WHERE sigle='INF1110' AND noGroupe = 20
  4  /

4 rows updated.

SQL> 
SQL> ROLLBACK
  2  /

Rollback complete.

SQL> 
SQL> -------------------------------------------------------------------------------
SQL> 
SQL> --3. Ajout de la cote à la Table Inscription.
SQL> 
SQL> --C7: Ajout de la colonne et de la contrainte à la table Inscription
SQL> ALTER TABLE Inscription
  2  ADD cote  CHAR(1)
  3  CONSTRAINT BonneCote CHECK(cote IN ('A','B','C','D','E'))
  4  /

Table altered.

SQL> 
SQL> --Fonction fCotePourNote: traite les cas pour
SQL> CREATE OR REPLACE FUNCTION fCotePourNote(
  2    laNote  Inscription.note%TYPE)
  3    RETURN Inscription.cote%TYPE
  4  IS
  5    laCote  Inscription.cote%TYPE;
  6  BEGIN
  7    IF(laNote >100 or laNote < 0) THEN
  8  	 raise_application_error(-20100, 'Mauvaise note');
  9    ELSIF (laNote IS NULL) THEN
 10  	   laCote := NULL;
 11    ELSIF (laNote >=90) THEN
 12  	   laCote := 'A';
 13    ELSIF (laNote < 90 AND laNote >= 80) THEN
 14  	   laCote := 'B';
 15    ELSIF (laNote < 80 AND laNote >= 70) THEN
 16  	 laCote := 'C';
 17    ELSIF (laNote < 70 AND laNote >= 60) THEN
 18  	 laCote := 'D';
 19    ELSE
 20  	 laCote :='E';
 21    END IF;
 22  
 23    RETURN laCote;
 24  END;
 25  /

Function created.

SQL> 
SQL> --Mise à jour de toutes les lignes.
SQL> UPDATE Inscription
  2  SET COTE = fcotepournote(note)
  3  /

22 rows updated.

SQL> 
SQL> --Affichage de la table mise à jour.
SQL> SELECT *
  2  FROM INSCRIPTION
  3  /

CODEPERMANENT                        SIGLE                   NOGROUPE           
------------------------------------ --------------------- ----------           
CODESESSION DATEINSCRI DATEABANDO       NOTE COT                                
----------- ---------- ---------- ---------- ---                                
TREJ18088001                         INF1110                       20           
      32003 16/08/2003                    80 B                                  
                                                                                
LAVP08087001                         INF1110                       20           
      32003 16/08/2003                    80 B                                  
                                                                                
TREL14027801                         INF1110                       30           
      32003 17/08/2003                    90 A                                  
                                                                                

CODEPERMANENT                        SIGLE                   NOGROUPE           
------------------------------------ --------------------- ----------           
CODESESSION DATEINSCRI DATEABANDO       NOTE COT                                
----------- ---------- ---------- ---------- ---                                
MARA25087501                         INF1110                       20           
      32003 20/08/2003                    80 B                                  
                                                                                
STEG03106901                         INF1110                       20           
      32003 17/08/2003                    70 C                                  
                                                                                
TREJ18088001                         INF1130                       10           
      32003 16/08/2003                    70 C                                  
                                                                                

CODEPERMANENT                        SIGLE                   NOGROUPE           
------------------------------------ --------------------- ----------           
CODESESSION DATEINSCRI DATEABANDO       NOTE COT                                
----------- ---------- ---------- ---------- ---                                
TREL14027801                         INF1130                       30           
      32003 17/08/2003                    80 B                                  
                                                                                
MARA25087501                         INF1130                       10           
      32003 22/08/2003                    90 A                                  
                                                                                
DEGE10027801                         INF3180                       30           
      32003 16/08/2003                    90 A                                  
                                                                                

CODEPERMANENT                        SIGLE                   NOGROUPE           
------------------------------------ --------------------- ----------           
CODESESSION DATEINSCRI DATEABANDO       NOTE COT                                
----------- ---------- ---------- ---------- ---                                
MONC05127201                         INF3180                       30           
      32003 19/08/2003                    60 D                                  
                                                                                
VANV05127201                         INF3180                       30           
      32003 16/08/2003 20/09/2003                                               
                                                                                
EMEK10106501                         INF3180                       40           
      32003 19/08/2003                    80 B                                  
                                                                                

CODEPERMANENT                        SIGLE                   NOGROUPE           
------------------------------------ --------------------- ----------           
CODESESSION DATEINSCRI DATEABANDO       NOTE COT                                
----------- ---------- ---------- ---------- ---                                
DUGR08085001                         INF3180                       40           
      32003 19/08/2003                    70 C                                  
                                                                                
TREJ18088001                         INF2110                       10           
      12004 19/12/2003                    80 B                                  
                                                                                
TREL14027801                         INF2110                       10           
      12004 20/12/2003                    90 A                                  
                                                                                

CODEPERMANENT                        SIGLE                   NOGROUPE           
------------------------------------ --------------------- ----------           
CODESESSION DATEINSCRI DATEABANDO       NOTE COT                                
----------- ---------- ---------- ---------- ---                                
MARA25087501                         INF2110                       40           
      12004 19/12/2003                    90 A                                  
                                                                                
STEG03106901                         INF2110                       40           
      12004 10/12/2003                    70 C                                  
                                                                                
VANV05127201                         INF3180                       10           
      12004 18/12/2003                    90 A                                  
                                                                                

CODEPERMANENT                        SIGLE                   NOGROUPE           
------------------------------------ --------------------- ----------           
CODESESSION DATEINSCRI DATEABANDO       NOTE COT                                
----------- ---------- ---------- ---------- ---                                
DEGE10027801                         INF5180                       10           
      12004 15/12/2003                    90 A                                  
                                                                                
MONC05127201                         INF5180                       10           
      12004 19/12/2003 22/01/2004                                               
                                                                                
EMEK10106501                         INF5180                       40           
      12004 19/12/2003                    80 B                                  
                                                                                

CODEPERMANENT                        SIGLE                   NOGROUPE           
------------------------------------ --------------------- ----------           
CODESESSION DATEINSCRI DATEABANDO       NOTE COT                                
----------- ---------- ---------- ---------- ---                                
DUGR08085001                         INF5180                       10           
      12004 19/12/2003                    80 B                                  
                                                                                

22 rows selected.

SQL> 
SQL> --------------------------------------------------------------------------------
SQL> 
SQL> --4. Création d'une procédure PL/SQL pBulletin. La procédure affiche un message
SQL> --   si un le codePermanent n'existe pas, ou si le codePermanent n'a pas de cous
SQL> --   dans la table Inscription. Cas non-traité: cours abandonné.
SQL> 
SQL> CREATE OR REPLACE PROCEDURE pBulletin
  2    (leCodePermanent  Inscription.codepermanent%TYPE)
  3  IS
  4  leNom	 etudiant.nom%TYPE;
  5  lePrenom	 etudiant.prenom%TYPE;
  6  leSigle	 Inscription.sigle%TYPE;
  7  leGroupe	 Inscription.noGroupe%TYPE;
  8  laSession	 Inscription.codeSession%TYPE;
  9  laNote	 Inscription.note%TYPE;
 10  laCote	 Inscription.cote%TYPE;
 11  nombreCours NUMBER;
 12  
 13  CURSOR touteInscription
 14  (unCodePermanent  inscription.codepermanent%TYPE) IS
 15    SELECT sigle, noGroupe, codeSession, note, cote
 16    FROM Inscription
 17    WHERE codePermanent = unCodePermanent;
 18  
 19  BEGIN
 20    dbms_output.put_line('code permament: ' || leCodePermanent);
 21  
 22    SELECT nom, prenom INTO leNom, lePrenom
 23    FROM Etudiant
 24    WHERE codePermanent = leCodePermanent;
 25  
 26    DBMS_OUTPUT.PUT_LINE('nom: ' || leNom);
 27    DBMS_OUTPUT.PUT_LINE('prenom: ' || lePrenom);
 28  
 29    SELECT COUNT(*) INTO nombreCours
 30    FROM Inscription
 31    WHERE codePermanent = leCodePermanent;
 32  
 33    IF (nombreCours = 0) THEN
 34  	 DBMS_OUTPUT.PUT_LINE('Aucun cours pour ce code permanent.');
 35    ELSE
 36  	 DBMS_OUTPUT.PUT_LINE('sigle   noGroupe  session note  cote');
 37  	 OPEN touteInscription(leCodePermanent);
 38  
 39  	 LOOP
 40  	   FETCH touteInscription INTO leSigle, leGroupe, laSession, laNote, laCote;
 41  	   EXIT WHEN touteInscription%NOTFOUND;
 42  	   DBMS_OUTPUT.PUT_LINE(leSigle || ' ' || leGroupe || '        ' || laSession
 43  			       || '   ' || laNote || '	  ' || laCote);
 44  	 END LOOP;
 45  
 46  	 CLOSE touteInscription;
 47    END IF;
 48  EXCEPTION
 49    WHEN NO_DATA_FOUND THEN
 50  	 DBMS_OUTPUT.PUT_LINE('Le codePermanent n''existe pas');
 51  END;
 52  /

Procedure created.

SQL> 
SQL> --Essai de la procédure
SQL> EXECUTE pBulletin('TREJ18088001')
code permament: TREJ18088001                                                    
nom: Tremblay                                                                   
prenom: Jean                                                                    
sigle   noGroupe  session note  cote                                            
INF1110 20        32003   80    B                                               
INF1130 10        32003   70    C                                               
INF2110 10        12004   80    B                                               

PL/SQL procedure successfully completed.

SQL> 
SQL> EXECUTE pBulletin('VANV05127201')
code permament: VANV05127201                                                    
nom: Van Gogh                                                                   
prenom: Vincent                                                                 
sigle   noGroupe  session note  cote                                            
INF3180 30        32003                                                         
INF3180 10        12004   90    A                                               

PL/SQL procedure successfully completed.

SQL> 
SQL> EXECUTE pBulletin('LAHG04077707')
code permament: LAHG04077707                                                    
Le codePermanent n'existe pas                                                   

PL/SQL procedure successfully completed.

SQL> 
SQL> INSERT INTO Etudiant
  2  VALUES('LAHG04077707','Lahaie','Guillaume', 7316)
  3  /

1 row created.

SQL> 
SQL> EXECUTE pBulletin('LAHG04077707')
code permament: LAHG04077707                                                    
nom: Lahaie                                                                     
prenom: Guillaume                                                               
Aucun cours pour ce code permanent.                                             

PL/SQL procedure successfully completed.

SQL> 
SQL> ROLLBACK
  2  /

Rollback complete.

SQL> 
SQL> --------------------------------------------------------------------------------
SQL> 
SQL> --5. Trigger qui calcule automatiquement la cote suite à une insertion
SQL> --   ou mise-à-jour d'inscription. Si la note est changée pour NULL, alors
SQL> --   la cote est aussi NULL.
SQL> CREATE OR REPLACE TRIGGER BIUMiseAJourNote
  2  BEFORE INSERT OR UPDATE OF note ON Inscription
  3  FOR EACH ROW
  4  BEGIN
  5  	 IF (:NEW.note IS NOT NULL) THEN
  6  	   :NEW.cote:=fCotePourNote(:NEW.note);
  7  	 ELSE
  8  	   :NEW.cote := NULL;
  9  	 END IF;
 10  END;
 11  /

Trigger created.

SQL> 
SQL> --Tests du déclencheur.
SQL> INSERT INTO Inscription
  2  VALUES('DUGR08085001','INF1110',20,32003,'16/08/2003',NULL,80,NULL)
  3  /

1 row created.

SQL> 
SQL> SELECT *
  2  FROM Inscription
  3  WHERE codePermanent='DUGR08085001' AND sigle='INF1110' AND noGroupe=20
  4  AND codeSession=32003
  5  /

CODEPERMANENT                        SIGLE                   NOGROUPE           
------------------------------------ --------------------- ----------           
CODESESSION DATEINSCRI DATEABANDO       NOTE COT                                
----------- ---------- ---------- ---------- ---                                
DUGR08085001                         INF1110                       20           
      32003 16/08/2003                    80 B                                  
                                                                                

SQL> 
SQL> UPDATE Inscription
  2  SET note= 70
  3  WHERE codePermanent='DUGR08085001' AND sigle='INF1110' AND noGroupe = 20
  4  AND codeSession = 32003
  5  /

1 row updated.

SQL> 
SQL> SELECT *
  2  FROM Inscription
  3  WHERE codePermanent='DUGR08085001' AND sigle='INF1110' AND noGroupe=20
  4  AND codeSession=32003
  5  /

CODEPERMANENT                        SIGLE                   NOGROUPE           
------------------------------------ --------------------- ----------           
CODESESSION DATEINSCRI DATEABANDO       NOTE COT                                
----------- ---------- ---------- ---------- ---                                
DUGR08085001                         INF1110                       20           
      32003 16/08/2003                    70 C                                  
                                                                                

SQL> --Le déclencheur est aussi testé lors du numéro 6.
SQL> --------------------------------------------------------------------------------
SQL> 
SQL> --6. Création de la vue MoyenneParGroupe
SQL> CREATE OR REPLACE VIEW MoyenneParGroupe AS
  2  SELECT sigle, noGroupe, codeSession, AVG(note) AS moyenneNote
  3  FROM Inscription
  4  GROUP BY sigle, noGroupe, codeSession
  5  ORDER BY sigle, noGroupe, codeSession
  6  /

View created.

SQL> 
SQL> --Vérification de la vue
SQL> SELECT *
  2  FROM MoyenneParGroupe
  3  /

SIGLE                   NOGROUPE CODESESSION MOYENNENOTE                        
--------------------- ---------- ----------- -----------                        
INF1110                       20       32003          76                        
INF1110                       30       32003          90                        
INF1130                       10       32003          80                        
INF1130                       30       32003          80                        
INF2110                       10       12004          85                        
INF2110                       40       12004          80                        
INF3180                       10       12004          90                        
INF3180                       30       32003          75                        
INF3180                       40       32003          75                        
INF5180                       10       12004          85                        
INF5180                       40       12004          80                        

11 rows selected.

SQL> 
SQL> --Définition du déclencheur.
SQL> CREATE OR REPLACE TRIGGER IUChangementMoyenne
  2  INSTEAD OF UPDATE ON MoyenneParGroupe
  3  REFERENCING
  4    OLD AS ligneAvant
  5    NEW AS ligneApres
  6  FOR EACH ROW
  7  DECLARE
  8    leCodePermanent	 Inscription.codePermanent%TYPE;
  9    leSigle		 Inscription.sigle%TYPE;
 10    leGroupe 	 Inscription.codeSession%TYPE;
 11    leCodeSession	 Inscription.codeSession%TYPE;
 12    laNote		 Inscription.note%TYPE;
 13  
 14  CURSOR lignesInscription IS
 15    SELECT codePermanent, sigle, noGroupe, codeSession, note
 16    FROM Inscription
 17    WHERE sigle = :ligneApres.sigle AND noGroupe = :ligneApres.noGroupe
 18    AND codeSession = :ligneApres.codeSession;
 19  
 20  BEGIN
 21  
 22  --Vérification de la nouvelle valeur de la moyenne
 23  IF (:ligneApres.moyenneNote < 0 OR :ligneApres.moyenneNote > 100 OR
 24  	 :ligneApres.moyenneNote IS NULL) THEN
 25  
 26    raise_application_error(-20100, 'Moyenne invalide');
 27  END IF;
 28  
 29  OPEN lignesInscription;
 30  LOOP
 31    FETCH lignesInscription INTO leCodePermanent, leSigle, leGroupe,
 32  	     leCodeSession, laNote;
 33    EXIT WHEN lignesInscription%NOTFOUND;
 34  
 35    IF (laNote IS NOT NULL) THEN
 36  	 UPDATE Inscription
 37  	 SET note = (laNote - :ligneAvant.moyenneNote) + :ligneApres.moyenneNote
 38  	 WHERE codePermanent = leCodePermanent AND sigle = leSigle AND
 39  	 codeSession = leCodeSession AND noGroupe = leGroupe;
 40    END IF;
 41  
 42  END LOOP;
 43  
 44  CLOSE lignesInscription;
 45  END;
 46  /

Trigger created.

SQL> 
SQL> --Test du déclencheur
SQL> UPDATE MoyenneParGroupe
  2  SET MoyenneNote = 70
  3  WHERE sigle = 'INF1130' AND noGroupe = 10 AND codeSession = 32003
  4  /

1 row updated.

SQL> 
SQL> SELECT *
  2  FROM MoyenneParGroupe
  3  WHERE sigle = 'INF1130' AND noGroupe = 10 AND codesession = 32003
  4  /

SIGLE                   NOGROUPE CODESESSION MOYENNENOTE                        
--------------------- ---------- ----------- -----------                        
INF1130                       10       32003          70                        

SQL> 
SQL> SELECT *
  2  FROM Inscription
  3  WHERE sigle = 'INF1130' AND noGroupe = 10 AND codesession = 32003
  4  /

CODEPERMANENT                        SIGLE                   NOGROUPE           
------------------------------------ --------------------- ----------           
CODESESSION DATEINSCRI DATEABANDO       NOTE COT                                
----------- ---------- ---------- ---------- ---                                
TREJ18088001                         INF1130                       10           
      32003 16/08/2003                    60 D                                  
                                                                                
MARA25087501                         INF1130                       10           
      32003 22/08/2003                    80 B                                  
                                                                                

SQL> 
SQL> --Changements de moyenne qui ne fonctionne pas
SQL> UPDATE MoyenneParGroupe
  2  SET MoyenneNote = NULL
  3  WHERE sigle = 'INF1130' AND noGroupe = 10 AND codeSession = 32003
  4  /
UPDATE MoyenneParGroupe
       *
ERROR at line 1:
ORA-20100: Moyenne invalide
ORA-06512: at "GK491589.IUCHANGEMENTMOYENNE", line 20
ORA-04088: error during execution of trigger 'GK491589.IUCHANGEMENTMOYENNE' 


SQL> 
SQL> --Ici la contrainte d'intégrité de changement de note sur inscription devrait
SQL> --refuser cette mise à jour
SQL> UPDATE MoyenneParGroupe
  2  SET MoyenneNote = 40
  3  WHERE sigle = 'INF1130' AND noGroupe = 10 AND codeSession = 32003
  4  /
UPDATE MoyenneParGroupe
       *
ERROR at line 1:
ORA-20100: Impossible de modifier une note 
de plus de 20 points.
ORA-06512: at "GK491589.BUCHANGEMENTDENOTE", line 3
ORA-04088: error during execution of trigger 'GK491589.BUCHANGEMENTDENOTE'
ORA-06512: at "GK491589.IUCHANGEMENTMOYENNE", line 30
ORA-04088: error during execution of trigger 'GK491589.IUCHANGEMENTMOYENNE' 


SQL> 
SQL> UPDATE MoyenneParGroupe
  2  SET MoyenneNote = 120
  3  WHERE sigle = 'INF1130' AND noGroupe = 10 AND codeSession = 32003
  4  /
UPDATE MoyenneParGroupe
       *
ERROR at line 1:
ORA-20100: Moyenne invalide
ORA-06512: at "GK491589.IUCHANGEMENTMOYENNE", line 20
ORA-04088: error during execution of trigger 'GK491589.IUCHANGEMENTMOYENNE' 


SQL> 
SQL> ROLLBACK
  2  /

Rollback complete.

SQL> 
SQL> SET ECHO OFF
